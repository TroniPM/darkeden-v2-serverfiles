//////////////////////////////////////////////////////////////////////
// 
// Filename    : ItemNameInfo.cpp 
// 
//////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////
// include files
//////////////////////////////////////////////////////////////////////
#include "ItemNameInfo.h"
#include "SocketInputStream.h"
#include "SocketOutputStream.h"

//////////////////////////////////////////////////////////////////////
// constructor
//////////////////////////////////////////////////////////////////////
/*ItemNameInfo::ItemNameInfo () 
     
{
	__BEGIN_TRY
	__END_CATCH
}

	
//////////////////////////////////////////////////////////////////////
// destructor
//////////////////////////////////////////////////////////////////////
ItemNameInfo::~ItemNameInfo () 
    
{
	__BEGIN_TRY
	__END_CATCH
}*/


//////////////////////////////////////////////////////////////////////
// 입력스트림(버퍼)으로부터 데이타를 읽어서 패킷을 초기화한다.
//////////////////////////////////////////////////////////////////////
void ItemNameInfo::read ( SocketInputStream & iStream ) 
	 
{
	__BEGIN_TRY
		
	BYTE szName;
	// 최적화 작업시 실제 크기를 명시하도록 한다.
	iStream.read( m_ObjectID );
	iStream.read( szName );
	iStream.read( m_Name, szName );

	__END_CATCH
}
		    
//////////////////////////////////////////////////////////////////////
// 출력스트림(버퍼)으로 패킷의 바이너리 이미지를 보낸다.
//////////////////////////////////////////////////////////////////////
void ItemNameInfo::write ( SocketOutputStream & oStream ) 
     
{
	__BEGIN_TRY
		
	BYTE szName = m_Name.size();
	oStream.write( m_ObjectID );
	oStream.write( szName );
	oStream.write( m_Name );

	__END_CATCH
}

//--------------------------------------------------------------------
// getSize
//--------------------------------------------------------------------
PacketSize_t ItemNameInfo::getSize() const
	
{
	__BEGIN_TRY

	BYTE szName = m_Name.size();

	PacketSize_t PacketSize = szObjectID + szBYTE + szName;

	return PacketSize;

	__END_CATCH
}

/////////////////////////////////////////////////////////////////////
//
// get packet's debug string
//
//////////////////////////////////////////////////////////////////////
string ItemNameInfo::toString () 
	
{
	__BEGIN_TRY

	StringStream msg;

	msg << "ItemNameInfo( "
		<< "ObjectID : " << m_ObjectID
		<< "Name : " << m_Name
		<< ")";

	return msg.toString();

	__END_CATCH
}
