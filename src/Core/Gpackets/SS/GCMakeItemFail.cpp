//////////////////////////////////////////////////////////////////////
// 
// Filename    : GCMakeItemFail.cpp 
// Written By  : elca@ewestsoft.com
// Description : 자신에게 쓰는 기술의 성공을 알리기 위한 패킷 클래스의
//               멤버 정의.
// 
//////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////
// include files
//////////////////////////////////////////////////////////////////////
#include "GCMakeItemFail.h"



//////////////////////////////////////////////////////////////////////
// constructor
//////////////////////////////////////////////////////////////////////
GCMakeItemFail::GCMakeItemFail () 
     throw ()
{
	__BEGIN_TRY
	__END_CATCH
}

	
//////////////////////////////////////////////////////////////////////
// destructor
//////////////////////////////////////////////////////////////////////
GCMakeItemFail::~GCMakeItemFail () 
    throw ()
{
	__BEGIN_TRY
	__END_CATCH
}


//////////////////////////////////////////////////////////////////////
// 입력스트림(버퍼)으로부터 데이타를 읽어서 패킷을 초기화한다.
//////////////////////////////////////////////////////////////////////
void GCMakeItemFail::read ( SocketInputStream & iStream ) 
	 throw ( ProtocolException , Error )
{
	__BEGIN_TRY

	GCChangeInventoryItemNum::read( iStream);		
	ModifyInfo::read( iStream);		

	__END_CATCH
}

		    
//////////////////////////////////////////////////////////////////////
// 출력스트림(버퍼)으로 패킷의 바이너리 이미지를 보낸다.
//////////////////////////////////////////////////////////////////////
void GCMakeItemFail::write ( SocketOutputStream & oStream ) 
     
{
	__BEGIN_TRY
	
	GCChangeInventoryItemNum::write( oStream);
	ModifyInfo::write( oStream);
	__END_CATCH
}


//////////////////////////////////////////////////////////////////////
//
// execute packet's handler
//
//////////////////////////////////////////////////////////////////////
void GCMakeItemFail::execute ( Player * pPlayer ) 
	 throw ( ProtocolException , Error )
{
	__BEGIN_TRY
		
	GCMakeItemFailHandler::execute( this , pPlayer );
		
	__END_CATCH
}


//////////////////////////////////////////////////////////////////////
//
// get packet's debug string
//
//////////////////////////////////////////////////////////////////////
string GCMakeItemFail::toString () 
	
{
	__BEGIN_TRY

	StringStream msg;
	msg << "GCMakeItemFail( "
		<< GCChangeInventoryItemNum::toString()
		<< ModifyInfo::toString()
		<< ")";
	return msg.toString();

	__END_CATCH
}

