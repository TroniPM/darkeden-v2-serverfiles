//////////////////////////////////////////////////////////////////////
// 
// Filename    : GCWhisperFailed.cpp 
// Written By  : elca@ewestsoft.com
// Description : 
// 
//////////////////////////////////////////////////////////////////////

// include files
#include "GCWhisperFailed.h"




//////////////////////////////////////////////////////////////////////
// constructor
//////////////////////////////////////////////////////////////////////
GCWhisperFailed::GCWhisperFailed () 
     
{
	__BEGIN_TRY
	__END_CATCH
}

	
//////////////////////////////////////////////////////////////////////
// destructor
//////////////////////////////////////////////////////////////////////
GCWhisperFailed::~GCWhisperFailed () 
    
{
	__BEGIN_TRY
	__END_CATCH
}


//////////////////////////////////////////////////////////////////////
// 입력스트림(버퍼)으로부터 데이타를 읽어서 패킷을 초기화한다.
//////////////////////////////////////////////////////////////////////
void GCWhisperFailed::read ( SocketInputStream & iStream ) 
	 
{
	__BEGIN_TRY
	__END_CATCH
}

		    
//////////////////////////////////////////////////////////////////////
// 출력스트림(버퍼)으로 패킷의 바이너리 이미지를 보낸다.
//////////////////////////////////////////////////////////////////////
void GCWhisperFailed::write ( SocketOutputStream & oStream ) const 
     
{
	__BEGIN_TRY
	__END_CATCH
}


//////////////////////////////////////////////////////////////////////
// execute packet's handler
//////////////////////////////////////////////////////////////////////
void GCWhisperFailed::execute ( Player * pPlayer ) 
	 
{
	__BEGIN_TRY

	GCWhisperFailedHandler::execute ( this , pPlayer );
		
	__END_CATCH
}


//////////////////////////////////////////////////////////////////////
// toString()
//////////////////////////////////////////////////////////////////////
string GCWhisperFailed::toString () const
    
{
	__BEGIN_TRY
		
	StringStream msg;
	msg << "GCWhisperFailed( " << " )";
	return msg.toString();

	__END_CATCH
}

